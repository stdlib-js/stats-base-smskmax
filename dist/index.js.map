{
  "version": 3,
  "sources": ["../lib/smskmax.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar isPositiveZerof = require( '@stdlib/math-base-assert-is-positive-zerof' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a single-precision floating-point strided array according to a mask.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @returns {number} maximum value\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 4.0, 2.0 ] );\n* var mask = new Uint8Array( [ 0, 0, 1, 0 ] );\n*\n* var v = smskmax( x.length, x, 1, mask, 1 );\n* // returns 2.0\n*/\nfunction smskmax( N, x, strideX, mask, strideMask ) {\n\tvar max;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideMask < 0 ) {\n\t\tim = (1-N) * strideMask;\n\t} else {\n\t\tim = 0;\n\t}\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmax = x[ ix ];\n\tif ( isnanf( max ) ) {\n\t\treturn max;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZerof( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smskmax;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnanf = require( '@stdlib/math-base-assert-is-nanf' );\nvar isPositiveZerof = require( '@stdlib/math-base-assert-is-positive-zerof' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a single-precision floating-point strided array according to a mask.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - `x` starting index\n* @param {Uint8Array} mask - mask array\n* @param {integer} strideMask - `mask` stride length\n* @param {NonNegativeInteger} offsetMask - `mask` starting index\n* @returns {number} maximum value\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var mask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = smskmax( N, x, 2, 1, mask, 2, 1 );\n* // returns 4.0\n*/\nfunction smskmax( N, x, strideX, offsetX, mask, strideMask, offsetMask ) {\n\tvar max;\n\tvar ix;\n\tvar im;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tix = offsetX;\n\tim = offsetMask;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( mask[ im ] === 0 ) {\n\t\t\tbreak;\n\t\t}\n\t\tix += strideX;\n\t\tim += strideMask;\n\t}\n\tif ( i === N ) {\n\t\treturn NaN;\n\t}\n\tmax = x[ ix ];\n\tif ( isnanf( max ) ) {\n\t\treturn max;\n\t}\n\ti += 1;\n\tfor ( i; i < N; i++ ) {\n\t\tix += strideX;\n\t\tim += strideMask;\n\t\tif ( mask[ im ] ) {\n\t\t\tcontinue;\n\t\t}\n\t\tv = x[ ix ];\n\t\tif ( isnanf( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZerof( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smskmax;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar smskmax = require( './smskmax.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( smskmax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = smskmax;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the maximum value of a single-precision floating-point strided array according to a mask.\n*\n* @module @stdlib/stats-base-smskmax\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var smskmax = require( '@stdlib/stats-base-smskmax' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, 4.0, 2.0 ] );\n* var mask = new Uint8Array( [ 0, 0, 1, 0 ] );\n*\n* var v = smskmax( x.length, x, 1 );\n* // returns 2.0\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var smskmax = require( '@stdlib/stats-base-smskmax' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, 5.0, 6.0 ] );\n* var mask = new Uint8Array( [ 0, 0, 0, 0, 0, 0, 0, 0, 1, 1 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = smskmax.ndarray( N, x, 2, 1, mask, 2, 1 );\n* // returns 4.0\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar smskmax;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsmskmax = main;\n} else {\n\tsmskmax = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = smskmax;\n\n// exports: { \"ndarray\": \"smskmax.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAkB,QAAS,4CAA6C,EAyB5E,SAASC,EAASC,EAAGC,EAAGC,EAASC,EAAMC,EAAa,CACnD,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKT,GAAK,EACT,MAAO,KAYR,IAVKE,EAAU,EACdI,GAAM,EAAEN,GAAKE,EAEbI,EAAK,EAEDF,EAAa,EACjBG,GAAM,EAAEP,GAAKI,EAEbG,EAAK,EAEAE,EAAI,EAAGA,EAAIT,GACXG,EAAMI,CAAG,IAAM,EADDE,IAInBH,GAAMJ,EACNK,GAAMH,EAEP,GAAKK,IAAMT,EACV,MAAO,KAGR,GADAK,EAAMJ,EAAGK,CAAG,EACPT,EAAQQ,CAAI,EAChB,OAAOA,EAGR,IADAI,GAAK,EACCA,EAAGA,EAAIT,EAAGS,IAGf,GAFAH,GAAMJ,EACNK,GAAMH,EACD,CAAAD,EAAMI,CAAG,EAId,IADAC,EAAIP,EAAGK,CAAG,EACLT,EAAQW,CAAE,EACd,OAAOA,GAEHA,EAAIH,GAASG,IAAMH,GAAOP,EAAiBU,CAAE,KACjDH,EAAMG,GAGR,OAAOH,CACR,CAKAT,EAAO,QAAUG,ICvGjB,IAAAW,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAS,QAAS,kCAAmC,EACrDC,EAAkB,QAAS,4CAA6C,EA6B5E,SAASC,EAASC,EAAGC,EAAGC,EAASC,EAASC,EAAMC,EAAYC,EAAa,CACxE,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,MAAO,KAIR,IAFAQ,EAAKL,EACLM,EAAKH,EACCK,EAAI,EAAGA,EAAIX,GACXI,EAAMK,CAAG,IAAM,EADDE,IAInBH,GAAMN,EACNO,GAAMJ,EAEP,GAAKM,IAAMX,EACV,MAAO,KAGR,GADAO,EAAMN,EAAGO,CAAG,EACPX,EAAQU,CAAI,EAChB,OAAOA,EAGR,IADAI,GAAK,EACCA,EAAGA,EAAIX,EAAGW,IAGf,GAFAH,GAAMN,EACNO,GAAMJ,EACD,CAAAD,EAAMK,CAAG,EAId,IADAC,EAAIT,EAAGO,CAAG,EACLX,EAAQa,CAAE,EACd,OAAOA,GAEHA,EAAIH,GAASG,IAAMH,GAAOT,EAAiBY,CAAE,KACjDH,EAAMG,GAGR,OAAOH,CACR,CAKAX,EAAO,QAAUG,ICnGjB,IAAAa,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAU,IACVC,EAAU,IAKdF,EAAaC,EAAS,UAAWC,CAAQ,EAKzCH,EAAO,QAAUE,ICkBjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAUD,EAEVC,EAAUC,EAMX,OAAO,QAAUD",
  "names": ["require_smskmax", "__commonJSMin", "exports", "module", "isnanf", "isPositiveZerof", "smskmax", "N", "x", "strideX", "mask", "strideMask", "max", "ix", "im", "v", "i", "require_ndarray", "__commonJSMin", "exports", "module", "isnanf", "isPositiveZerof", "smskmax", "N", "x", "strideX", "offsetX", "mask", "strideMask", "offsetMask", "max", "ix", "im", "v", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "smskmax", "ndarray", "join", "tryRequire", "isError", "main", "smskmax", "tmp"]
}
